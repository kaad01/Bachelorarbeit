import cv2
import numpy as np

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

from sort import *

tracker = Sort()

frame1 = cv2.imread("test.png")
frame2 = cv2.imread("test2.png")
cfg = get_cfg()
# add project-specific config (e.g., TensorMask) here if you're not running a model in detectron2's core library
cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # set threshold for this model
# Find a model from detectron2's model zoo. You can use the https://dl.fbaipublicfiles... url as well
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
predictor = DefaultPredictor(cfg)
outputs1 = predictor(frame1)
outputs2 = predictor(frame2)

# We can use `Visualizer` to draw the predictions on the image.
v = Visualizer(frame1[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)
out = v.draw_instance_predictions(outputs1["instances"].to("cpu"))
cv2.imshow("frame1",out.get_image()[:, :, ::-1])
cv2.waitKey(0)

# update SORT
track_bbs_ids = tracker.update(outputs2])
print(track_bbs_ids)

v = Visualizer(frame2[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)
out = v.draw_instance_predictions(outputs2["instances"].to("cpu"))
cv2.imshow("frame1",out.get_image()[:, :, ::-1])
cv2.waitKey(0)

# update SORT
track_bbs_ids = tracker.update(outputs2["instances"])
print(track_bbs_ids)
